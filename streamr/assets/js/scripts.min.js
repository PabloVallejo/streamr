//
//  Application config file
//

window.App = {
  		Handlers: {}
 	,	Models: {}
  	,	Controllers: {}
  	,	Views: {}
  	,	Helpers: {}
};
//
// Helper: Utilities
//
( function( $, window, document ) {

	var Utils = function() {
        return this.ajaxSetup();
	}

	Utils.prototype = {

			/**
            * Converts hiphens to underscores
            */
            hyphenToUnderscore: function( string ) {
                return string.replace( /([-])/g, function( $1 ) {

                    return "_";

                });
            }


        	/**
            * Maps form inputs generated when using serializeArray();
            * pusshes them to an array in a key( name ) value( value ) structure
            *
            * @param { array } serializeArray() generated array
            * @return { array } mapped array
            *
            */
        ,   mapFormInputs: function( data, type, dropEmpty ) {

                var formData = type || []
                ,   _this = this;

                $.each( data, function( key, val ) {

                    replaced = _this.hyphenToUnderscore( val.name );

                    if ( dropEmpty ) {

                        if ( val.value != "" ) {
                            formData[ replaced ] = val.value;
                        }

                        new Image()
                    }

                    else {
                        formData[ replaced ] = val.value;
                    }

                });

                return formData;

            }


			/**
            * Gets the form data
            * @param { obj || str } form object or selector
            * @return { obj } mapped form
            */
        ,   getFormData: function( form, dropEmpty ) {

                var data
                ,   _this = this;

                if ( dropEmpty == null ) {
                    dropEmpty = true;
                }

                data = $( form ).serializeArray();
                data = this.mapFormInputs( data, {}, dropEmpty );

                $.each( data, function( key, value ) {
                    if ( value == "on" ) {
                        data[ key ] = true;
                    }
                });

                // Check for empty values
                $( form ).find( "input[type=checkbox]" ).each( function() {
                    if ( ! $( this ).is( ":checked" ) ) {
                        name = $( this ).attr( "name" );
                        name = _this.hyphenToUnderscore( name );
                        data[ name ] = false;
                    }

                });

                return data;

            }

            /**
            * Helps in the process of making a ajax requests
            *
            * @param { object } Options for configuring the ajax request
            * @param { object } data object to be sent
            */
        ,   ajax: function( options, data ) {

                var result
                ,   defaults = {
                        type: 'post'
                    ,   dataType: 'json'
                    ,   data: data
                    ,   async: false
                    ,   success: function( data ) {
                            result = data;
                        }

                    ,   error: function ( XMLHttpRequest, textStatus, errorThrown ) {
                            console.log( "error :" + XMLHttpRequest.responseText );
                        }
                    }

                // Merge defaults and options
                options = $.extend( {}, defaults, options );

                // Do the ajax request
                $.ajax( options );

                // Return the response object
                return result;

            }


            /**
            * Checks whether the current HTTP verb require CSRF protection
            * @param { string }
            * @return { bool }
            */
        ,   csrfSafeMethod: function( method ) {
                return ( /(GET|HEAD|OPTIONS|TRACE)$/.test( method ) );
            }


            /**
            * Tests that a given URL is a same-origin URL
            * @param { string } url to tests
            * @return { bool }
            */
        ,   sameOrigin: function( url ) {

                var host = document.location.host // Host + post
                ,   protocol = document.location.protocol
                ,   sr_origin = '//' + host
                ,   origin = protocol + sr_origin;

                // Allow absolute or scheme relative URLs to same origin
                return ( url == origin || url.slice( 0, origin.length + 1 ) == origin + '/' ) ||
                ( url == sr_origin || url.slice( 0, sr_origin.length + 1 ) == sr_origin + '/' ) ||

                // Or any other URL that isn't scheme relative or absolute i.e relative.
                !( /^(\/\/|http:|https:).*/.test( url ) );

            }

            /**
            * Adds the CSRFToken header to the AJAX requests
            */
        ,   ajaxSetup: function() {

                var _this = this;

                $.ajaxSetup({

                    beforeSend: function( xhr, settings ) {

                        // Send the token to same-origin, relative URLs only.
                        // Send the token only if the method warrants CSFR protection
                        // using the CSRFToken value acquired earlier
                        if ( ! _this.csrfSafeMethod( settings.type ) && _this.sameOrigin( settings.url ) ) {
                            var csrfToken = $.cookie( 'csrftoken' );
                            xhr.setRequestHeader( 'X-CSRFToken', csrfToken );
                        }
                    }

                });

            }

	};

	// Global exposition
	window.App.Helpers.Utils = new Utils();

})( jQuery, this, this.document );
/**
*
* Model User
*/
( function( $, window, document, utils ) {

	var User = Gillie.Model.extend({

			// Logs users in and emits an event
	 		// on the model
			login: function( creds ) {

				var	_this = this
				,	data = {
						creds: JSON.stringify( creds )
					}
				,	options = {
							async: true
						,	url: '/login'
						,	success: function( data ) {
								_this.trigger( 'loginSync', data );
							}
					}

				return utils.ajax( options, data );
			}

	});

	// Global Exposition
	window.App.Models.User = new User();



})( this.jQuery, this, this.document, this.App.Helpers.Utils, undefined );


/**
*
* View User
*/
( function( $, window, document, model, utils ) {

	var User = Gillie.View.extend({

			// Init
			initialize: function() {

				model.on( 'loginSync', this.handleLogin );
			}


			// Handle login
		,	handleLogin: function( data ) {
				
				var submit = '.login-page .login-form input[type="submit"]'
				,	notification = '.login-page .login-form .notification p';

				if ( data.status == 600 ) {

					$( notification )
						.text( data.data.error_text )
						.addClass( 'error' ).slideDown( 200 );
				} 

				else {
					window.location.reload();
				}

				$( submit ).removeClass( 'disabled' )
					.attr( 'value', $( submit ).data( 'original-text' ) );
			}

	});

	// Global Exposition
	window.App.Views.User = new User();



})( this.jQuery, this, this.document, this.App.Models.User, this.App.Helpers.Utils, undefined );


/**
*
* Controller: User
*/
( function( $, window, document, view, model, utils ) {

	var User = function( a ) {

		// Class attributes can be set here
	}

	User.prototype = {

			// Login
			login: function( data ) {
				model.login( data );						
			}

	}

	// Global Exposition
	window.App.Controllers.User = new User();



})( this.jQuery, this, this.document, this.App.Views.User, this.App.Models.User, this.App.Helpers.Utils, undefined );


/**
*
* Handler User
*/
( function( $, window, document, view, controller, utils ) {


	var User = Gillie.Handler.extend({

			// Initialize
			initialize: function()  {
				console.log( 'Gillie' );
			}

		,	events: {
				'submit .login-page .login-form': 'login'
			}


			// Login 
		,	login: function( e ) {
				e.preventDefault();

				var target = e.currentTarget
				,	submit = $( target ).find( 'input[type="submit"]' );

				if ( submit.hasClass( 'disabled' ) ) return;
				submit
					.addClass( 'disabled' )
					.attr( 'value', 'Working...' );

				data = utils.getFormData( e.currentTarget );
				return controller.login( data );
			}


	});


	// Global Exposition
	window.App.Handlers.User = new User();



})( this.jQuery, this, this.document, this.App.Views.User, this.App.Controllers.User, this.App.Helpers.Utils, undefined );


(function() {



}).call(this);
